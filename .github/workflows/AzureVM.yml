name: Terraform Deployment

on:
  workflow_dispatch:

jobs:
  terraform-deploy:
    runs-on: self-hosted

    steps:
      # Step 1: Check out the latest code
      - name: Check out repository
        uses: actions/checkout@v3


      # Step 3: Authenticate with Azure using email and password
      - name: Azure CLI Login with Email and Password
        shell: pwsh
        run: |
          cd Terraform_Scripts
          terraform init -upgrade
          terraform plan -out main.tfplan
          terraform apply main.tfplan
          $json = terraform output -json
          $jsonObject = $json | ConvertFrom-Json
          $publicIP = $jsonObject.public_ip_address.value
          $username = "azureadmin"
          $password = "Dbs@1234567"
          $keyPath = "~/.ssh/id_rsa"
          $publicKeyPath = "~/.ssh/id_rsa.pub"  
          if (-not (Test-Path $keyPath)) 
          {
              Write-Host "Generating SSH key..."
              ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N '' -v
          }
          $publicKeyContent = Get-Content $publicKeyPath
          $passwordSecure = ConvertTo-SecureString -AsPlainText -String $password -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $passwordSecure)
          $session = New-SSHSession -ComputerName $publicIP -Credential $credential -AcceptKey
          if ($session.Connected) {
              Write-Host "Connected to VM successfully."
          
              # Path to authorized_keys on remote VM
              $remoteAuthorizedKeysPath = "/home/$username/.ssh/authorized_keys"
          
              # Ensure the .ssh directory exists on the remote machine
              Invoke-SSHCommand -SessionId $session.SessionId -Command "mkdir -p /home/$username/.ssh"
          
              # Add the public key to the remote VM's authorized_keys file
              Invoke-SSHCommand -SessionId $session.SessionId -Command "echo '$publicKeyContent' >> $remoteAuthorizedKeysPath"
          
              # Set correct permissions for the authorized_keys file
              Invoke-SSHCommand -SessionId $session.SessionId -Command "chmod 600 $remoteAuthorizedKeysPath"
          
              Write-Host "Public key added to the remote VM."
              Invoke-SSHCommand -SessionId $session.SessionId -Command "sudo apt update -y"
              Start-Sleep -Seconds 20
              Invoke-SSHCommand -SessionId $session.SessionId -Command "sudo apt upgrade -y"
              Start-Sleep -Seconds 20
              Invoke-SSHCommand -SessionId $session.SessionId -Command "sudo apt install docker.io -y"
              Invoke-SSHCommand -SessionId $session.SessionId -Command "docker --version"
          
              # Close the SSH session
              Remove-SSHSession -SessionId $session.SessionId
          } 
          else 
          {
              Write-Host "Failed to connect to the remote VM."
          }

          cd ..
          cd HelloWorld
          docker build -t automation_app:latest .
          docker save -o automation_app.tar automation_app:latest
          scp ./automation_app.tar $username@$publicIP:/home/$publicIP/automation_app.tar
          

          
          




          
